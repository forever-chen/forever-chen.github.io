<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>gitalk搭建评论系统</title>
    <url>/2021/06/25/gitalk%E6%90%AD%E5%BB%BA%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p>今天用hexo与github搭建了自己的博客，用gitalk搭建的评论系统，踩了下gitalk的坑</p>
<h2 id="gitalk官网地址"><a href="#gitalk官网地址" class="headerlink" title="gitalk官网地址"></a><a href="https://github.com/gitalk/gitalk">gitalk官网地址</a></h2><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><h4 id="在hexo的主题config-yml文件中配置gitalk"><a href="#在hexo的主题config-yml文件中配置gitalk" class="headerlink" title="在hexo的主题config.yml文件中配置gitalk"></a>在hexo的主题config.yml文件中配置gitalk</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 2、Gitalk(https://github.com/gitalk/gitalk)</span><br><span class="line">gitalk:</span><br><span class="line">  enable: true # true</span><br><span class="line">  clientID: # GitHub Application Client ID</span><br><span class="line">  clientSecret:  # Client Secret</span><br><span class="line">  repo:  forever-chen.github.io # Repository name</span><br><span class="line">  owner: forever-chen # GitHub ID</span><br><span class="line">  admin: [forever-chen] # GitHub ID</span><br><span class="line">注意在config文件中书写键值对中间一定要加一个空格</span><br></pre></td></tr></table></figure>
<h4 id="在github上注册应用（前提是已经注册了github）"><a href="#在github上注册应用（前提是已经注册了github）" class="headerlink" title="在github上注册应用（前提是已经注册了github）"></a>在github上注册应用（前提是已经注册了github）</h4><ul>
<li>第一步：没注册github自行百度去</li>
<li>第二步：<a href="https://github.com/settings/developers">注册github应用</a><br><img src="../images/gitalk1.png" alt="注册图片"></li>
<li>注册完了把里面对应的clientID，clientSecret拿过来就可以了</li>
<li>然后再到下面主题这个文件夹下修改对应的文件<br><img src="../images/gitalk2.png" alt="注册图片"></li>
<li>接下来在评论区看到的应该是这样的<br><img src="../images/gitalk3.png" alt="未登录"></li>
<li>看到上面的问题直接github登录就可以了<h4 id="gitalk的问题是要评论必须要登录githuab账号才可以，未登录只能看到评论但是不能些评论"><a href="#gitalk的问题是要评论必须要登录githuab账号才可以，未登录只能看到评论但是不能些评论" class="headerlink" title="gitalk的问题是要评论必须要登录githuab账号才可以，未登录只能看到评论但是不能些评论"></a>gitalk的问题是要评论必须要登录githuab账号才可以，未登录只能看到评论但是不能些评论</h4></li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo使用技巧以及发现的问题总结</title>
    <url>/2021/06/25/hexo%E4%BD%BF%E7%94%A8%E4%B8%AD%E5%8F%91%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%8C%E5%8F%8A%E6%97%B6%E6%9B%B4%E6%96%B0%E4%B8%AD%E2%80%A6%E2%80%A6/</url>
    <content><![CDATA[<h5 id="执行hexo-deploy部署代码时没有把新代码提交上去"><a href="#执行hexo-deploy部署代码时没有把新代码提交上去" class="headerlink" title="执行hexo deploy部署代码时没有把新代码提交上去"></a>执行hexo deploy部署代码时没有把新代码提交上去</h5><p><img src="../images/hexo1.png" alt="未成功"></p>
<ul>
<li>解决办法<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">先执行 hexo clean  </span><br><span class="line">然后再执行hexo generate </span><br><span class="line">最后执行 hexo deploy</span><br><span class="line">如果嫌麻烦的话，可以再package.json中添加命令  &quot;deploy&quot;: &quot;hexo clean&amp;hexo generate&amp;hexo deploy&quot;</span><br></pre></td></tr></table></figure>
<h4 id="在vscode中编写markdown文件可以用插件-Markdown-Preview-Enhanced查看效果"><a href="#在vscode中编写markdown文件可以用插件-Markdown-Preview-Enhanced查看效果" class="headerlink" title="在vscode中编写markdown文件可以用插件 Markdown Preview Enhanced查看效果"></a>在vscode中编写markdown文件可以用插件 <code>Markdown Preview Enhanced</code>查看效果</h4></li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo基础使用</title>
    <url>/2021/06/24/hexo%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2021/06/30/nginx/ngxin%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="nginx-上手指南"><a href="#nginx-上手指南" class="headerlink" title="nginx 上手指南"></a>nginx 上手指南</h1><h2 id="为什么要使用nginx"><a href="#为什么要使用nginx" class="headerlink" title="为什么要使用nginx"></a>为什么要使用nginx</h2><ul>
<li>nginx是由俄罗斯人lgor sysoev编写的轻量级web服务器，不仅是一个高性能的http和反向代理服务器，同时也是一个IMP/PO3/SMTP代理服务器<br><img src="../images/nginx/nginx1.png" alt="nginx使用频率图"></li>
<li>nginx是以事件驱动的方式编写，所以由非常好的性能</li>
<li>nginx是非常高效的反向代理，负载均衡服务器</li>
<li>nginx占用资源非常少，能够支持5万左右的并发，达到比较好的访问效率</li>
<li>nginx支持热部署，启动速度比较快，可以在不间断服务的情况下对软件版本进行升级</li>
<li>在微服务的体系中，nginx被许多项目采用作为网关来使用，配合lua做限流，熔断等控制<h2 id="ngxin安装"><a href="#ngxin安装" class="headerlink" title="ngxin安装"></a>ngxin安装</h2></li>
<li><a href="http://nginx.org/en/download.html">下载地址</a></li>
<li>下载完成之后直接在文件根目录下执行<code>nginx</code>就可以启动服务<h2 id="nginx命令"><a href="#nginx命令" class="headerlink" title="nginx命令"></a>nginx命令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nginx -c &lt;path&gt; 为nginx指定一个配置文件，来代替缺省的</span><br><span class="line">nginx -t 测试配置文件，检查愈发的正确性</span><br><span class="line">nginx -v/-V 检查nginx版本</span><br><span class="line">nginx 启动nginx服务器</span><br><span class="line">nginx -s stop 停止服务器</span><br><span class="line">nginx -s reload 重新加载服务器</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="nginx中的配置符号"><a href="#nginx中的配置符号" class="headerlink" title="nginx中的配置符号"></a>nginx中的配置符号</h2></li>
<li>容量符号<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">k,K 千字节</span><br><span class="line">m,M 兆字节</span><br></pre></td></tr></table></figure></li>
<li>时间符号<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ms 毫秒</span><br><span class="line">s 秒</span><br><span class="line">m 分钟</span><br><span class="line">h 小时</span><br><span class="line">d 日</span><br><span class="line">w 周</span><br><span class="line">M 月</span><br><span class="line">y 年</span><br><span class="line">1h 30m 代表1小时30分钟</span><br></pre></td></tr></table></figure>
<h2 id="location-匹配规则"><a href="#location-匹配规则" class="headerlink" title="location 匹配规则"></a>location 匹配规则</h2></li>
<li>nginx有两层指令来匹配请求URI。第一层指令通过域名，端口号，ip来进行以及匹配，当找到对应的server之后，进入对应server再进行location匹配<h4 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h4></li>
<li>～ 波浪线表示执行一个匹配规则，区分大小写</li>
<li>～* 不区分大小写</li>
<li>^~ 表示通用字符匹配，如果该选项匹配，就不会匹配别的选项</li>
<li>= 精确匹配</li>
<li>@ 定义一个location，使用在内部定向，例如：error_page,try_files<h4 id="匹配优先级（-gt-gt-gt-最长前缀匹配-gt-）"><a href="#匹配优先级（-gt-gt-gt-最长前缀匹配-gt-）" class="headerlink" title="匹配优先级（= &gt; ^~ &gt; ~ = ~* &gt;最长前缀匹配 &gt; /）"></a>匹配优先级（= &gt; ^~ &gt; ~ = ~* &gt;最长前缀匹配 &gt; /）</h4></li>
<li>=精确匹配会被第一个处理</li>
<li>普通字符匹配会按照匹配规则的长度进行匹配，越长优先级越高<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location  = / &#123;</span><br><span class="line">  # 只匹配&quot;/&quot;.</span><br><span class="line">  [ configuration A ] </span><br><span class="line">&#125;</span><br><span class="line">location  / &#123;</span><br><span class="line">  # 匹配任何请求，因为所有请求都是以&quot;/&quot;开始</span><br><span class="line">  # 但是更长字符匹配或者正则表达式匹配会优先匹配</span><br><span class="line">  [ configuration B ] </span><br><span class="line">&#125;</span><br><span class="line">location ^~ /images/ &#123;</span><br><span class="line">  # 匹配任何以 /images/ 开始的请求，并停止匹配 其它location</span><br><span class="line">  [ configuration C ] </span><br><span class="line">&#125;</span><br><span class="line">location ~* .(gif|jpg|jpeg)$ &#123;</span><br><span class="line">  # 匹配以 gif, jpg, or jpeg结尾的请求. </span><br><span class="line">  # 但是所有 /images/ 目录的请求将由 [Configuration C]处理.   </span><br><span class="line">  [ configuration D ] </span><br><span class="line">&#125;</span><br><span class="line">error_page 404 = @fetch;</span><br><span class="line"></span><br><span class="line">location @fetch(</span><br><span class="line">    proxy_pass http://fetch;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h4 id="匹配问号后面的参数，，这些参数是存储在-query-string变量中，可以用if来进行判断"><a href="#匹配问号后面的参数，，这些参数是存储在-query-string变量中，可以用if来进行判断" class="headerlink" title="匹配问号后面的参数，，这些参数是存储在$query_string变量中，可以用if来进行判断"></a>匹配问号后面的参数，，这些参数是存储在$query_string变量中，可以用if来进行判断</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if ( $query_string ~* &quot;.*[;&#x27;&lt;&gt;].*&quot; )&#123;</span><br><span class="line">  return 404;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="location-URI结尾如果不带-，一般会匹配文件，匹配不到文件也会匹配目录，带着-会匹配目录"><a href="#location-URI结尾如果不带-，一般会匹配文件，匹配不到文件也会匹配目录，带着-会匹配目录" class="headerlink" title="location URI结尾如果不带/ ，一般会匹配文件，匹配不到文件也会匹配目录，带着/会匹配目录"></a>location URI结尾如果不带/ ，一般会匹配文件，匹配不到文件也会匹配目录，带着/会匹配目录</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果URI的结尾带有/，并且location要执行的命令式是proxy_pass、fastcgi_pass、uwsgi_pass、scgi_pass、memcached_pass、grpc_pass之一</span><br><span class="line">location  /images/&#123;</span><br><span class="line">    proxy_pass http://www.redis.com.cn</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="location中变量"><a href="#location中变量" class="headerlink" title="location中变量"></a>location中变量</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$args #这个变量等于请求行中的参数。</span><br><span class="line">$content_length #请求头中的Content-length字段。</span><br><span class="line">$content_type #请求头中的Content-Type字段。</span><br><span class="line">$document_root #当前请求在root指令中指定的值。</span><br><span class="line">$host #请求主机头字段，否则为服务器名称。</span><br><span class="line">$http_user_agent #客户端agent信息</span><br><span class="line">$http_cookie #客户端cookie信息</span><br><span class="line">$limit_rate #这个变量可以限制连接速率。</span><br><span class="line">$request_body_file #客户端请求主体信息的临时文件名。</span><br><span class="line">$request_method #客户端请求的动作，通常为GET或POST。</span><br><span class="line">$remote_addr #客户端的IP地址。</span><br><span class="line">$remote_port #客户端的端口。</span><br><span class="line">$remote_user #已经经过Auth Basic Module验证的用户名。</span><br><span class="line">$request_filename #当前请求的文件路径，由root或alias指令与URI请求生成。</span><br><span class="line">$query_string #与$args相同。</span><br><span class="line">$scheme #HTTP方法（如http，https）。</span><br><span class="line">$server_protocol #请求使用的协议，通常是HTTP/1.0或HTTP/1.1。</span><br><span class="line">$server_addr #服务器地址，在完成一次系统调用后可以确定这个值。</span><br><span class="line">$server_name #服务器名称。</span><br><span class="line">$server_port #请求到达服务器的端口号。</span><br><span class="line">$request_uri #包含请求参数的原始URI，不包含主机名，如：”/foo/bar.php?arg=baz”。</span><br><span class="line">$uri #不带请求参数的当前URI，$uri不包含主机名，如”/foo/bar.html”。</span><br><span class="line">$document_uri #与$uri相同。</span><br></pre></td></tr></table></figure>
<h2 id="nginx中的变量"><a href="#nginx中的变量" class="headerlink" title="nginx中的变量"></a>nginx中的变量</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nginx中所有默认时间都是60s</span><br><span class="line"># clinet的keep-alive连接超时时间，服务器将在这个时间后关闭连接</span><br><span class="line">keepalive_timeout </span><br><span class="line">#允许客户端请求的最大的单个文件字节数</span><br><span class="line">client_max_body_size 10m; </span><br><span class="line">#缓冲区代理缓冲用户端请求的最大字节数 可以理解为先保存到本地再传给用户</span><br><span class="line">client_body_buffer_size 128k;</span><br><span class="line"></span><br><span class="line">#跟后端服务器连接的超时时间_发起握手等候响应超时时间</span><br><span class="line">proxy_connect_timeout 600;  </span><br><span class="line"></span><br><span class="line">#连接成功后_等候后端服务器响应时间_其实已经进入后端的排队等候处理</span><br><span class="line">proxy_read_timeout 600;</span><br><span class="line"></span><br><span class="line">#后端服务器数据回传时间_就是在规定时间之内后端服务器必须传完所有的数据</span><br><span class="line">proxy_send_timeout 600;</span><br><span class="line"></span><br><span class="line">#代理请求缓存区_这个缓存区间会保存用户的头信息以供Nginx进行规则处理_一般只要能保存下头信息即可</span><br><span class="line">proxy_buffer_size 8k;</span><br><span class="line"></span><br><span class="line">#同上 告诉Nginx保存单个用的几个Buffer 最大用多大空间</span><br><span class="line">proxy_buffers 4 32k;</span><br><span class="line"></span><br><span class="line">#如果系统很忙的时候可以申请更大的proxy_buffers 官方推荐*2</span><br><span class="line">proxy_busy_buffers_size 64k;</span><br><span class="line"></span><br><span class="line">#proxy缓存临时文件的大小</span><br><span class="line">proxy_temp_file_write_size 64k;</span><br></pre></td></tr></table></figure>
<h2 id="upstream的配置以及作用"><a href="#upstream的配置以及作用" class="headerlink" title="upstream的配置以及作用"></a>upstream的配置以及作用</h2></li>
<li>定义一组服务器，这些服务器可以监听不同的端口，而且在tcp和<strong>unix</strong>域套接字的服务器都可以使用<h4 id="语法：server-address-parameters"><a href="#语法：server-address-parameters" class="headerlink" title="语法：server address [parameters];"></a>语法：server address [parameters];</h4></li>
<li>address可以是域名或者ip地址，端口是可选的，默认是80</li>
<li>unix：前缀的unix域套接字的路径</li>
<li>weight=number设置服务器的权重，默认是1</li>
<li>max_fails=number设定nginx与服务器通信的尝试失败的次数，在fail_timeout设定时间内，如果失败的次数达到这个次数，nginx就认定这个服务器不可用，默认值是1，设为0就会停止统计尝试次数，认为服务器是一直可用的</li>
<li>backup标记为备用服务器，当主服务器不可用时，请求会被传到这些服务器</li>
<li>down标记服务器永远不可用，用ip_hash指令一起使用<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upstream backend &#123;</span><br><span class="line">    server backend1.example.com     weight=5;</span><br><span class="line">    server 127.0.0.1:8080           max_fails=3 fail_timeout=30s;</span><br><span class="line">    server unix:/tmp/backend3;</span><br><span class="line">    server backend1.example.com;</span><br><span class="line">    server backend2.example.com;</span><br><span class="line">    server backend3.example.com down;</span><br><span class="line">    server backend4.example.com;</span><br><span class="line">    server backup1.example.com:8080 backup;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>ip_hash指定服务器组的负载均衡方法，请求基于客户端的ip地址在服务器间进行分发。IPv4地址的前三位或者IPv6的整个地址会被作为一个散列的key，确保统一客户端过来的请求，会被传到同一台服务器，除非是服务器中途不可用。<h4 id="keepalive"><a href="#keepalive" class="headerlink" title="keepalive"></a>keepalive</h4></li>
<li>语法：keepalive connections;</li>
<li>connection参数设置每个worker进程与后端服务器保持连接的最大数量。这些保持的连接会被放入缓存，如果连接大于这个数，最久未使用的连接会被关闭。这个属性不是说会限制nginx进程与上游服务器连接的总数，如果所有连接都在使用，就会创建新的连接<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upstream memcached_backend &#123;</span><br><span class="line">    server 127.0.0.1:11211;</span><br><span class="line">    server 10.0.0.2:11211;</span><br><span class="line">    keepalive 32;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    ...</span><br><span class="line">    location /memcached/ &#123;</span><br><span class="line">        set $memcached_key $uri;</span><br><span class="line">        memcached_pass memcached_backend;</span><br><span class="line">    &#125;</span><br><span class="line">    location /http/ &#123;</span><br><span class="line">        proxy_pass http://http_backend;</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_set_header Connection &quot;&quot;;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">对于http请求proxy_http_version指令应该设置为“1.1”，同时“Connection”头的值也应被清空</span><br></pre></td></tr></table></figure>
<h2 id="rewrite"><a href="#rewrite" class="headerlink" title="rewrite"></a>rewrite</h2>nginx通过ngx_http_rewrite_module模块支持url的重写，支持if判断，但是不支持else<h4 id="rewrite的执行顺序"><a href="#rewrite的执行顺序" class="headerlink" title="rewrite的执行顺序"></a>rewrite的执行顺序</h4></li>
<li>1 执行server的rewrite指令</li>
<li>2 执行location匹配</li>
<li>3 执行选定location中的rewrite</li>
<li>4 如果中间某一步URI被重写，则重新循环执行1-3，直至找到真实的连接</li>
<li>5 如果循环超过10次，则返回500 intenel Server Error<h4 id="break"><a href="#break" class="headerlink" title="break"></a>break</h4></li>
<li>作用域：server，location，if。停止当前虚拟主机的后续rewrite指令集<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if ($slow) &#123;</span><br><span class="line">    limit_rate 10k;</span><br><span class="line">    break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="if指令"><a href="#if指令" class="headerlink" title="if指令"></a>if指令</h4></li>
<li>一个变量名；false如果这个变量是空字符串或者以0开始的字符串；</li>
<li>使用= ,!= 比较的一个变量和字符串</li>
<li>是用~， ~*与正则表达式匹配的变量，如果这个正则表达式中包含}，;则整个表达式需要用” 或’ 包围</li>
<li>使用-f ，!-f 检查一个文件是否存在</li>
<li>使用-d, !-d 检查一个目录是否存在</li>
<li>使用-e ，!-e 检查一个文件、目录、符号链接是否存在</li>
<li>使用-x ， !-x 检查一个文件是否可执行<h4 id="return指令"><a href="#return指令" class="headerlink" title="return指令"></a>return指令</h4></li>
<li>return code</li>
<li>停止处理并返回指定状态码给客户端</li>
</ul>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#运行用户</span><br><span class="line">user nobody;</span><br><span class="line">#启动进程,通常设置成和cpu的数量相等</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">#全局错误日志及PID文件</span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line"></span><br><span class="line">#pid        logs/nginx.pid;</span><br><span class="line"></span><br><span class="line">#工作模式及连接数上限</span><br><span class="line">events &#123;</span><br><span class="line">    #epoll是多路复用IO(I/O Multiplexing)中的一种方式,</span><br><span class="line">    #仅用于linux2.6以上内核,可以大大提高nginx的性能</span><br><span class="line">    use   epoll; </span><br><span class="line"></span><br><span class="line">    #单个后台worker process进程的最大并发链接数    </span><br><span class="line">    worker_connections  1024;</span><br><span class="line"></span><br><span class="line">    # 并发总数是 worker_processes 和 worker_connections 的乘积</span><br><span class="line">    # 即 max_clients = worker_processes * worker_connections</span><br><span class="line">    # 在设置了反向代理的情况下，max_clients = worker_processes * worker_connections / 4  为什么</span><br><span class="line">    # 为什么上面反向代理要除以4，应该说是一个经验值</span><br><span class="line">    # 根据以上条件，正常情况下的Nginx Server可以应付的最大连接数为：4 * 8000 = 32000</span><br><span class="line">    # worker_connections 值的设置跟物理内存大小有关</span><br><span class="line">    # 因为并发受IO约束，max_clients的值须小于系统可以打开的最大文件数</span><br><span class="line">    # 而系统可以打开的最大文件数和内存大小成正比，一般1GB内存的机器上可以打开的文件数大约是10万左右</span><br><span class="line">    # 我们来看看360M内存的VPS可以打开的文件句柄数是多少：</span><br><span class="line">    # $ cat /proc/sys/fs/file-max</span><br><span class="line">    # 输出 34336</span><br><span class="line">    # 32000 &lt; 34336，即并发连接总数小于系统可以打开的文件句柄总数，这样就在操作系统可以承受的范围之内</span><br><span class="line">    # 所以，worker_connections 的值需根据 worker_processes 进程数目和系统可以打开的最大文件总数进行适当地进行设置</span><br><span class="line">    # 使得并发总数小于操作系统可以打开的最大文件数目</span><br><span class="line">    # 其实质也就是根据主机的物理CPU和内存进行配置</span><br><span class="line">    # 当然，理论上的并发总数可能会和实际有所偏差，因为主机还有其他的工作进程需要消耗系统资源。</span><br><span class="line">    # ulimit -SHn 65535</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    #设定mime类型,类型由mime.type文件定义</span><br><span class="line">    include    mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    #设定日志格式</span><br><span class="line">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    #sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，</span><br><span class="line">    #对于普通应用，必须设为 on,</span><br><span class="line">    #如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，</span><br><span class="line">    #以平衡磁盘与网络I/O处理速度，降低系统的uptime.</span><br><span class="line">    sendfile     on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #连接超时时间</span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    tcp_nodelay     on;</span><br><span class="line"></span><br><span class="line">    #开启gzip压缩</span><br><span class="line">    gzip  on;</span><br><span class="line">    gzip_disable &quot;MSIE [1-6].&quot;;</span><br><span class="line"></span><br><span class="line">    #设定请求缓冲</span><br><span class="line">    client_header_buffer_size    128k;</span><br><span class="line">    large_client_header_buffers  4 128k;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    #设定虚拟主机配置</span><br><span class="line">    server &#123;</span><br><span class="line">        #侦听80端口</span><br><span class="line">        listen    80;</span><br><span class="line">        #定义使用 www.nginx.cn访问</span><br><span class="line">        server_name  www.nginx.cn;</span><br><span class="line"></span><br><span class="line">        #定义服务器的默认网站根目录位置</span><br><span class="line">        root html;</span><br><span class="line"></span><br><span class="line">        #设定本虚拟主机的访问日志</span><br><span class="line">        access_log  logs/nginx.access.log  main;</span><br><span class="line"></span><br><span class="line">        #默认请求</span><br><span class="line">        location / &#123;</span><br><span class="line">            </span><br><span class="line">            #定义首页索引文件的名称</span><br><span class="line">            index index.php index.html index.htm;   </span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # 定义错误提示页面</span><br><span class="line">        error_page   500 502 503 504 /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #静态文件，nginx自己处理</span><br><span class="line">        location ~ ^/(images|javascript|js|css|flash|media|static)/ &#123;</span><br><span class="line">            </span><br><span class="line">            #过期30天，静态文件不怎么更新，过期可以设大一点，</span><br><span class="line">            #如果频繁更新，则可以设置得小一点。</span><br><span class="line">            expires 30d;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #PHP 脚本请求全部转发到 FastCGI处理. 使用FastCGI默认配置.</span><br><span class="line">        location ~ .php$ &#123;</span><br><span class="line">            fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">            fastcgi_index index.php;</span><br><span class="line">            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</span><br><span class="line">            include fastcgi_params;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #禁止访问 .htxxx 文件</span><br><span class="line">            location ~ /.ht &#123;</span><br><span class="line">            deny all;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
</search>
