<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>echarts随父元素宽度变化渲染</title>
    <url>/2021/07/09/echarts%E7%88%B6%E5%85%83%E7%B4%A0%E5%AE%BD%E5%BA%A6%E5%8F%98%E5%8C%96%E9%87%8D%E6%96%B0%E6%B8%B2%E6%9F%93/</url>
    <content><![CDATA[<h2 id="echarts随父元素宽度变化渲染（ResizeObserver）"><a href="#echarts随父元素宽度变化渲染（ResizeObserver）" class="headerlink" title="echarts随父元素宽度变化渲染（ResizeObserver）"></a>echarts随父元素宽度变化渲染（ResizeObserver）</h2><h3 id="概念：ResizeObserver监听内容区域或-SVGElement的边界框改变"><a href="#概念：ResizeObserver监听内容区域或-SVGElement的边界框改变" class="headerlink" title="概念：ResizeObserver监听内容区域或 SVGElement的边界框改变"></a>概念：ResizeObserver监听内容区域或 SVGElement的边界框改变</h3><ul>
<li>通俗点说就是监听元素内容区域的变化，内容区域则需要减去内边距padding</li>
<li>回调函数中不会触发事件，可以避免在自身毁掉中调整大小，从而触发的无限回调和循环依赖。</li>
<li><a href="https://caniuse.com/?search=ResizeObserver">can I use</a><br><img src="../images/echarts1.png" alt="兼容性"><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3></li>
<li>disconnect:取消和结束目标对象傻姑娘所有对elment的监听</li>
<li>observe：开始观察指定的element</li>
<li>unobserve：结束观察指定的element<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const resizeObserver = new ResizeObserver(entries =&gt; &#123;</span><br><span class="line">  for (let entry of entries) &#123;</span><br><span class="line">    entry.target.style.borderRadius = Math.max(0, 250 - entry.contentRect.width) + &#x27;px&#x27;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">resizeObserver.observe(document.querySelector(&#x27;.box:nth-child(2)&#x27;));</span><br></pre></td></tr></table></figure>
<h3 id="监听echarts元素宽度变化"><a href="#监听echarts元素宽度变化" class="headerlink" title="监听echarts元素宽度变化"></a>监听echarts元素宽度变化</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 如果元素宽度或者高度变化有动画，回调函数会一直触发，所以用throttle节流</span><br><span class="line">const ro = new ResizeObserver(throttle(this.setOption,500));</span><br><span class="line">ro.observe(this.$refs.element);</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>echarts</tag>
      </tags>
  </entry>
  <entry>
    <title>gitalk搭建评论系统</title>
    <url>/2021/06/25/gitalk%E6%90%AD%E5%BB%BA%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p>今天用hexo与github搭建了自己的博客，用gitalk搭建的评论系统，踩了下gitalk的坑</p>
<h2 id="gitalk官网地址"><a href="#gitalk官网地址" class="headerlink" title="gitalk官网地址"></a><a href="https://github.com/gitalk/gitalk">gitalk官网地址</a></h2><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><h4 id="在hexo的主题config-yml文件中配置gitalk"><a href="#在hexo的主题config-yml文件中配置gitalk" class="headerlink" title="在hexo的主题config.yml文件中配置gitalk"></a>在hexo的主题config.yml文件中配置gitalk</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 2、Gitalk(https://github.com/gitalk/gitalk)</span><br><span class="line">gitalk:</span><br><span class="line">  enable: true # true</span><br><span class="line">  clientID: # GitHub Application Client ID</span><br><span class="line">  clientSecret:  # Client Secret</span><br><span class="line">  repo:  forever-chen.github.io # Repository name</span><br><span class="line">  owner: forever-chen # GitHub ID</span><br><span class="line">  admin: [forever-chen] # GitHub ID</span><br><span class="line">注意在config文件中书写键值对中间一定要加一个空格</span><br></pre></td></tr></table></figure>
<h4 id="在github上注册应用（前提是已经注册了github）"><a href="#在github上注册应用（前提是已经注册了github）" class="headerlink" title="在github上注册应用（前提是已经注册了github）"></a>在github上注册应用（前提是已经注册了github）</h4><ul>
<li>第一步：没注册github自行百度去</li>
<li>第二步：<a href="https://github.com/settings/developers">注册github应用</a><br><img src="../images/gitalk1.png" alt="注册图片"></li>
<li>注册完了把里面对应的clientID，clientSecret拿过来就可以了</li>
<li>然后再到下面主题这个文件夹下修改对应的文件<br><img src="../images/gitalk2.png" alt="注册图片"></li>
<li>接下来在评论区看到的应该是这样的<br><img src="../images/gitalk3.png" alt="未登录"></li>
<li>看到上面的问题直接github登录就可以了<h4 id="gitalk的问题是要评论必须要登录githuab账号才可以，未登录只能看到评论但是不能些评论"><a href="#gitalk的问题是要评论必须要登录githuab账号才可以，未登录只能看到评论但是不能些评论" class="headerlink" title="gitalk的问题是要评论必须要登录githuab账号才可以，未登录只能看到评论但是不能些评论"></a>gitalk的问题是要评论必须要登录githuab账号才可以，未登录只能看到评论但是不能些评论</h4></li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo使用技巧以及发现的问题总结</title>
    <url>/2021/06/25/hexo%E4%BD%BF%E7%94%A8%E4%B8%AD%E5%8F%91%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%8C%E5%8F%8A%E6%97%B6%E6%9B%B4%E6%96%B0%E4%B8%AD%E2%80%A6%E2%80%A6/</url>
    <content><![CDATA[<h5 id="执行hexo-deploy部署代码时没有把新代码提交上去"><a href="#执行hexo-deploy部署代码时没有把新代码提交上去" class="headerlink" title="执行hexo deploy部署代码时没有把新代码提交上去"></a>执行hexo deploy部署代码时没有把新代码提交上去</h5><p><img src="../images/hexo1.png" alt="未成功"></p>
<ul>
<li>解决办法<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">先执行 hexo clean  </span><br><span class="line">然后再执行hexo generate </span><br><span class="line">最后执行 hexo deploy</span><br><span class="line">如果嫌麻烦的话，可以再package.json中添加命令  &quot;deploy&quot;: &quot;hexo clean&amp;hexo generate&amp;hexo deploy&quot;</span><br></pre></td></tr></table></figure>
<h4 id="在vscode中编写markdown文件可以用插件-Markdown-Preview-Enhanced查看效果"><a href="#在vscode中编写markdown文件可以用插件-Markdown-Preview-Enhanced查看效果" class="headerlink" title="在vscode中编写markdown文件可以用插件 Markdown Preview Enhanced查看效果"></a>在vscode中编写markdown文件可以用插件 <code>Markdown Preview Enhanced</code>查看效果</h4></li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo基础使用</title>
    <url>/2021/06/24/hexo%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>js函数中的节流防抖以及使用</title>
    <url>/2021/07/09/%E5%87%BD%E6%95%B0%E7%9A%84%E8%8A%82%E6%B5%81%E9%98%B2%E6%8A%96/</url>
    <content><![CDATA[<h2 id="js函数中的节流防抖以及使用"><a href="#js函数中的节流防抖以及使用" class="headerlink" title="js函数中的节流防抖以及使用"></a>js函数中的节流防抖以及使用</h2><h3 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h3><h5 id="概念：-通俗点说就是在一定时间内，限制一个动作只执行一次"><a href="#概念：-通俗点说就是在一定时间内，限制一个动作只执行一次" class="headerlink" title="概念： 通俗点说就是在一定时间内，限制一个动作只执行一次"></a>概念： 通俗点说就是在一定时间内，限制一个动作只执行一次</h5><h5 id="为什么要使用节流"><a href="#为什么要使用节流" class="headerlink" title="为什么要使用节流"></a>为什么要使用节流</h5><ul>
<li>在前端开发中，有一些需要频繁触发的函数比如onresize,scroll,mousemove,moverover等，如果不加限制的话1秒内可能会触发几百次</li>
<li>还有搜索框ajax请求，多次的请求会造成数据的混乱以及网络阻塞，占用服务器宽带，增加服务器压力<h5 id="节流方案"><a href="#节流方案" class="headerlink" title="节流方案"></a>节流方案</h5></li>
<li>第一种：时间戳节流<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 时间戳方案</span><br><span class="line">function throttle(fn,wait)&#123;</span><br><span class="line">    var pre = Date.now();   </span><br><span class="line">    return function()&#123;</span><br><span class="line">        var context = this;</span><br><span class="line">        var args = arguments;</span><br><span class="line">        var now = Date.now();</span><br><span class="line">        if( now - pre &gt;= wait)&#123;</span><br><span class="line">            fn.apply(context,args);</span><br><span class="line">            pre = Date.now();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function handle()&#123;</span><br><span class="line">    console.log(Math.random());</span><br><span class="line">&#125;</span><br><span class="line">window.addEventListener(&quot;mousemove&quot;,throttle(handle,1000));</span><br><span class="line">// 事件初始化会定义pre的值，一般函数（mousemove）执行的时候立马就会执行一次，然后wait毫秒之后会执行第二次</span><br></pre></td></tr></table></figure></li>
<li>第二种：定时器节流<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 定时器方案</span><br><span class="line">function throttle(fn,wait)&#123;</span><br><span class="line">    var timer = null;</span><br><span class="line">    return function()&#123;</span><br><span class="line">        var context = this;</span><br><span class="line">        var args = arguments;</span><br><span class="line">        if(!timer)&#123;</span><br><span class="line">            timer = seTimeout(function()&#123;</span><br><span class="line">                fn.apply(context,args);</span><br><span class="line">                timer = null;</span><br><span class="line">            &#125;,wait)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">function handle()&#123;</span><br><span class="line">    console.log(Math.random());</span><br><span class="line">&#125;</span><br><span class="line">window.addEventListener(&quot;mousemove&quot;,throttle(handle,1000));</span><br><span class="line">// 第一次触发之后等待wait毫秒之后才会执行fn</span><br></pre></td></tr></table></figure>
<h3 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h3><h4 id="概念：在给定的时间过后，或者连续事件完全触发完成之后，仅调用一次"><a href="#概念：在给定的时间过后，或者连续事件完全触发完成之后，仅调用一次" class="headerlink" title="概念：在给定的时间过后，或者连续事件完全触发完成之后，仅调用一次"></a>概念：在给定的时间过后，或者连续事件完全触发完成之后，仅调用一次</h4><h4 id="第一种防抖-非立即执行版"><a href="#第一种防抖-非立即执行版" class="headerlink" title="第一种防抖:非立即执行版"></a>第一种防抖:非立即执行版</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function debounce(func,wait)&#123;</span><br><span class="line">    let timeer</span><br><span class="line">    return function()&#123;</span><br><span class="line">        let context = this</span><br><span class="line">        let args = arguments</span><br><span class="line">        if(timer) clearTimeout(timer)</span><br><span class="line">        timer = setTimeout(()=&gt;&#123;</span><br><span class="line">            func.apply(context,args)</span><br><span class="line">        &#125;,wait)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 事件完成wait毫秒之后才会执行func</span><br></pre></td></tr></table></figure>
<h4 id="第二种：立即执行版"><a href="#第二种：立即执行版" class="headerlink" title="第二种：立即执行版"></a>第二种：立即执行版</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function debounce(func,wait)&#123;</span><br><span class="line">    let timeer</span><br><span class="line">    return function()&#123;</span><br><span class="line">        let context = this</span><br><span class="line">        let args = arguments</span><br><span class="line">        if(timer) clearTimeout(timer)</span><br><span class="line">        timer = setTimeout(()=&gt;&#123;</span><br><span class="line">            timer = null</span><br><span class="line">        &#125;,wait)</span><br><span class="line">        let callNow = !timer</span><br><span class="line">        if(callNow)&#123;</span><br><span class="line">            func.apply(context,args)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 事件完成wait毫秒之后立即执行</span><br></pre></td></tr></table></figure>
<h2 id="冷知识"><a href="#冷知识" class="headerlink" title="冷知识"></a>冷知识</h2></li>
<li>setTimeout的最短时间是4ms</li>
<li>setInterval的最短时间是10ms</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx使用</title>
    <url>/2021/06/30/nginx/ngxin%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="nginx-上手指南"><a href="#nginx-上手指南" class="headerlink" title="nginx 上手指南"></a>nginx 上手指南</h1><h2 id="为什么要使用nginx"><a href="#为什么要使用nginx" class="headerlink" title="为什么要使用nginx"></a>为什么要使用nginx</h2><ul>
<li>nginx是由俄罗斯人lgor sysoev编写的轻量级web服务器，不仅是一个高性能的http和反向代理服务器，同时也是一个IMP/PO3/SMTP代理服务器<br><img src="../images/nginx/nginx1.png" alt="nginx使用频率图"></li>
<li>nginx是以事件驱动的方式编写，所以由非常好的性能</li>
<li>nginx是非常高效的反向代理，负载均衡服务器</li>
<li>nginx占用资源非常少，能够支持5万左右的并发，达到比较好的访问效率</li>
<li>nginx支持热部署，启动速度比较快，可以在不间断服务的情况下对软件版本进行升级</li>
<li>在微服务的体系中，nginx被许多项目采用作为网关来使用，配合lua做限流，熔断等控制<h2 id="ngxin安装"><a href="#ngxin安装" class="headerlink" title="ngxin安装"></a>ngxin安装</h2></li>
<li><a href="http://nginx.org/en/download.html">下载地址</a></li>
<li>下载完成之后直接在文件根目录下执行<code>nginx</code>就可以启动服务<h2 id="nginx命令"><a href="#nginx命令" class="headerlink" title="nginx命令"></a>nginx命令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nginx -c &lt;path&gt; 为nginx指定一个配置文件，来代替缺省的</span><br><span class="line">nginx -t 测试配置文件，检查愈发的正确性</span><br><span class="line">nginx -v/-V 检查nginx版本</span><br><span class="line">nginx 启动nginx服务器</span><br><span class="line">nginx -s stop 停止服务器</span><br><span class="line">nginx -s reload 重新加载服务器</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="nginx中的配置符号"><a href="#nginx中的配置符号" class="headerlink" title="nginx中的配置符号"></a>nginx中的配置符号</h2></li>
<li>容量符号<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">k,K 千字节</span><br><span class="line">m,M 兆字节</span><br></pre></td></tr></table></figure></li>
<li>时间符号<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ms 毫秒</span><br><span class="line">s 秒</span><br><span class="line">m 分钟</span><br><span class="line">h 小时</span><br><span class="line">d 日</span><br><span class="line">w 周</span><br><span class="line">M 月</span><br><span class="line">y 年</span><br><span class="line">1h 30m 代表1小时30分钟</span><br></pre></td></tr></table></figure>
<h2 id="location-匹配规则"><a href="#location-匹配规则" class="headerlink" title="location 匹配规则"></a>location 匹配规则</h2></li>
<li>nginx有两层指令来匹配请求URI。第一层指令通过域名，端口号，ip来进行以及匹配，当找到对应的server之后，进入对应server再进行location匹配<h4 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h4></li>
<li>～ 波浪线表示执行一个匹配规则，区分大小写</li>
<li>～* 不区分大小写</li>
<li>^~ 表示通用字符匹配，如果该选项匹配，就不会匹配别的选项</li>
<li>= 精确匹配</li>
<li>@ 定义一个location，使用在内部定向，例如：error_page,try_files<h4 id="匹配优先级（-gt-gt-gt-最长前缀匹配-gt-）"><a href="#匹配优先级（-gt-gt-gt-最长前缀匹配-gt-）" class="headerlink" title="匹配优先级（= &gt; ^~ &gt; ~ = ~* &gt;最长前缀匹配 &gt; /）"></a>匹配优先级（= &gt; ^~ &gt; ~ = ~* &gt;最长前缀匹配 &gt; /）</h4></li>
<li>=精确匹配会被第一个处理</li>
<li>普通字符匹配会按照匹配规则的长度进行匹配，越长优先级越高<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location  = / &#123;</span><br><span class="line">  # 只匹配&quot;/&quot;.</span><br><span class="line">  [ configuration A ] </span><br><span class="line">&#125;</span><br><span class="line">location  / &#123;</span><br><span class="line">  # 匹配任何请求，因为所有请求都是以&quot;/&quot;开始</span><br><span class="line">  # 但是更长字符匹配或者正则表达式匹配会优先匹配</span><br><span class="line">  [ configuration B ] </span><br><span class="line">&#125;</span><br><span class="line">location ^~ /images/ &#123;</span><br><span class="line">  # 匹配任何以 /images/ 开始的请求，并停止匹配 其它location</span><br><span class="line">  [ configuration C ] </span><br><span class="line">&#125;</span><br><span class="line">location ~* .(gif|jpg|jpeg)$ &#123;</span><br><span class="line">  # 匹配以 gif, jpg, or jpeg结尾的请求. </span><br><span class="line">  # 但是所有 /images/ 目录的请求将由 [Configuration C]处理.   </span><br><span class="line">  [ configuration D ] </span><br><span class="line">&#125;</span><br><span class="line">error_page 404 = @fetch;</span><br><span class="line"></span><br><span class="line">location @fetch(</span><br><span class="line">    proxy_pass http://fetch;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h4 id="匹配问号后面的参数，，这些参数是存储在-query-string变量中，可以用if来进行判断"><a href="#匹配问号后面的参数，，这些参数是存储在-query-string变量中，可以用if来进行判断" class="headerlink" title="匹配问号后面的参数，，这些参数是存储在$query_string变量中，可以用if来进行判断"></a>匹配问号后面的参数，，这些参数是存储在$query_string变量中，可以用if来进行判断</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if ( $query_string ~* &quot;.*[;&#x27;&lt;&gt;].*&quot; )&#123;</span><br><span class="line">  return 404;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="location-URI结尾如果不带-，一般会匹配文件，匹配不到文件也会匹配目录，带着-会匹配目录"><a href="#location-URI结尾如果不带-，一般会匹配文件，匹配不到文件也会匹配目录，带着-会匹配目录" class="headerlink" title="location URI结尾如果不带/ ，一般会匹配文件，匹配不到文件也会匹配目录，带着/会匹配目录"></a>location URI结尾如果不带/ ，一般会匹配文件，匹配不到文件也会匹配目录，带着/会匹配目录</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果URI的结尾带有/，并且location要执行的命令式是proxy_pass、fastcgi_pass、uwsgi_pass、scgi_pass、memcached_pass、grpc_pass之一</span><br><span class="line">location  /images/&#123;</span><br><span class="line">    proxy_pass http://www.redis.com.cn</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="location中变量"><a href="#location中变量" class="headerlink" title="location中变量"></a>location中变量</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$args #这个变量等于请求行中的参数。</span><br><span class="line">$content_length #请求头中的Content-length字段。</span><br><span class="line">$content_type #请求头中的Content-Type字段。</span><br><span class="line">$document_root #当前请求在root指令中指定的值。</span><br><span class="line">$host #请求主机头字段，否则为服务器名称。</span><br><span class="line">$http_user_agent #客户端agent信息</span><br><span class="line">$http_cookie #客户端cookie信息</span><br><span class="line">$limit_rate #这个变量可以限制连接速率。</span><br><span class="line">$request_body_file #客户端请求主体信息的临时文件名。</span><br><span class="line">$request_method #客户端请求的动作，通常为GET或POST。</span><br><span class="line">$remote_addr #客户端的IP地址。</span><br><span class="line">$remote_port #客户端的端口。</span><br><span class="line">$remote_user #已经经过Auth Basic Module验证的用户名。</span><br><span class="line">$request_filename #当前请求的文件路径，由root或alias指令与URI请求生成。</span><br><span class="line">$query_string #与$args相同。</span><br><span class="line">$scheme #HTTP方法（如http，https）。</span><br><span class="line">$server_protocol #请求使用的协议，通常是HTTP/1.0或HTTP/1.1。</span><br><span class="line">$server_addr #服务器地址，在完成一次系统调用后可以确定这个值。</span><br><span class="line">$server_name #服务器名称。</span><br><span class="line">$server_port #请求到达服务器的端口号。</span><br><span class="line">$request_uri #包含请求参数的原始URI，不包含主机名，如：”/foo/bar.php?arg=baz”。</span><br><span class="line">$uri #不带请求参数的当前URI，$uri不包含主机名，如”/foo/bar.html”。</span><br><span class="line">$document_uri #与$uri相同。</span><br></pre></td></tr></table></figure>
<h2 id="nginx中的变量"><a href="#nginx中的变量" class="headerlink" title="nginx中的变量"></a>nginx中的变量</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nginx中所有默认时间都是60s</span><br><span class="line"># clinet的keep-alive连接超时时间，服务器将在这个时间后关闭连接</span><br><span class="line">keepalive_timeout </span><br><span class="line">#允许客户端请求的最大的单个文件字节数</span><br><span class="line">client_max_body_size 10m; </span><br><span class="line">#缓冲区代理缓冲用户端请求的最大字节数 可以理解为先保存到本地再传给用户</span><br><span class="line">client_body_buffer_size 128k;</span><br><span class="line"></span><br><span class="line">#跟后端服务器连接的超时时间_发起握手等候响应超时时间</span><br><span class="line">proxy_connect_timeout 600;  </span><br><span class="line"></span><br><span class="line">#连接成功后_等候后端服务器响应时间_其实已经进入后端的排队等候处理</span><br><span class="line">proxy_read_timeout 600;</span><br><span class="line"></span><br><span class="line">#后端服务器数据回传时间_就是在规定时间之内后端服务器必须传完所有的数据</span><br><span class="line">proxy_send_timeout 600;</span><br><span class="line"></span><br><span class="line">#代理请求缓存区_这个缓存区间会保存用户的头信息以供Nginx进行规则处理_一般只要能保存下头信息即可</span><br><span class="line">proxy_buffer_size 8k;</span><br><span class="line"></span><br><span class="line">#同上 告诉Nginx保存单个用的几个Buffer 最大用多大空间</span><br><span class="line">proxy_buffers 4 32k;</span><br><span class="line"></span><br><span class="line">#如果系统很忙的时候可以申请更大的proxy_buffers 官方推荐*2</span><br><span class="line">proxy_busy_buffers_size 64k;</span><br><span class="line"></span><br><span class="line">#proxy缓存临时文件的大小</span><br><span class="line">proxy_temp_file_write_size 64k;</span><br></pre></td></tr></table></figure>
<h2 id="upstream的配置以及作用"><a href="#upstream的配置以及作用" class="headerlink" title="upstream的配置以及作用"></a>upstream的配置以及作用</h2></li>
<li>定义一组服务器，这些服务器可以监听不同的端口，而且在tcp和<strong>unix</strong>域套接字的服务器都可以使用<h4 id="语法：server-address-parameters"><a href="#语法：server-address-parameters" class="headerlink" title="语法：server address [parameters];"></a>语法：server address [parameters];</h4></li>
<li>address可以是域名或者ip地址，端口是可选的，默认是80</li>
<li>unix：前缀的unix域套接字的路径</li>
<li>weight=number设置服务器的权重，默认是1</li>
<li>max_fails=number设定nginx与服务器通信的尝试失败的次数，在fail_timeout设定时间内，如果失败的次数达到这个次数，nginx就认定这个服务器不可用，默认值是1，设为0就会停止统计尝试次数，认为服务器是一直可用的</li>
<li>backup标记为备用服务器，当主服务器不可用时，请求会被传到这些服务器</li>
<li>down标记服务器永远不可用，用ip_hash指令一起使用<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upstream backend &#123;</span><br><span class="line">    server backend1.example.com     weight=5;</span><br><span class="line">    server 127.0.0.1:8080           max_fails=3 fail_timeout=30s;</span><br><span class="line">    server unix:/tmp/backend3;</span><br><span class="line">    server backend1.example.com;</span><br><span class="line">    server backend2.example.com;</span><br><span class="line">    server backend3.example.com down;</span><br><span class="line">    server backend4.example.com;</span><br><span class="line">    server backup1.example.com:8080 backup;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>ip_hash指定服务器组的负载均衡方法，请求基于客户端的ip地址在服务器间进行分发。IPv4地址的前三位或者IPv6的整个地址会被作为一个散列的key，确保统一客户端过来的请求，会被传到同一台服务器，除非是服务器中途不可用。<h4 id="keepalive"><a href="#keepalive" class="headerlink" title="keepalive"></a>keepalive</h4></li>
<li>语法：keepalive connections;</li>
<li>connection参数设置每个worker进程与后端服务器保持连接的最大数量。这些保持的连接会被放入缓存，如果连接大于这个数，最久未使用的连接会被关闭。这个属性不是说会限制nginx进程与上游服务器连接的总数，如果所有连接都在使用，就会创建新的连接<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upstream memcached_backend &#123;</span><br><span class="line">    server 127.0.0.1:11211;</span><br><span class="line">    server 10.0.0.2:11211;</span><br><span class="line">    keepalive 32;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    ...</span><br><span class="line">    location /memcached/ &#123;</span><br><span class="line">        set $memcached_key $uri;</span><br><span class="line">        memcached_pass memcached_backend;</span><br><span class="line">    &#125;</span><br><span class="line">    location /http/ &#123;</span><br><span class="line">        proxy_pass http://http_backend;</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_set_header Connection &quot;&quot;;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">对于http请求proxy_http_version指令应该设置为“1.1”，同时“Connection”头的值也应被清空</span><br></pre></td></tr></table></figure>
<h2 id="rewrite"><a href="#rewrite" class="headerlink" title="rewrite"></a>rewrite</h2>nginx通过ngx_http_rewrite_module模块支持url的重写，支持if判断，但是不支持else<h4 id="rewrite的执行顺序"><a href="#rewrite的执行顺序" class="headerlink" title="rewrite的执行顺序"></a>rewrite的执行顺序</h4></li>
<li>1 执行server的rewrite指令</li>
<li>2 执行location匹配</li>
<li>3 执行选定location中的rewrite</li>
<li>4 如果中间某一步URI被重写，则重新循环执行1-3，直至找到真实的连接</li>
<li>5 如果循环超过10次，则返回500 intenel Server Error<h4 id="break"><a href="#break" class="headerlink" title="break"></a>break</h4></li>
<li>作用域：server，location，if。停止当前虚拟主机的后续rewrite指令集<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if ($slow) &#123;</span><br><span class="line">    limit_rate 10k;</span><br><span class="line">    break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="if指令"><a href="#if指令" class="headerlink" title="if指令"></a>if指令</h4></li>
<li>一个变量名；false如果这个变量是空字符串或者以0开始的字符串；</li>
<li>使用= ,!= 比较的一个变量和字符串</li>
<li>是用~， ~*与正则表达式匹配的变量，如果这个正则表达式中包含}，;则整个表达式需要用” 或’ 包围</li>
<li>使用-f ，!-f 检查一个文件是否存在</li>
<li>使用-d, !-d 检查一个目录是否存在</li>
<li>使用-e ，!-e 检查一个文件、目录、符号链接是否存在</li>
<li>使用-x ， !-x 检查一个文件是否可执行<h4 id="return指令"><a href="#return指令" class="headerlink" title="return指令"></a>return指令</h4></li>
<li>return code</li>
<li>停止处理并返回指定状态码给客户端<h3 id="nginx-反向代理"><a href="#nginx-反向代理" class="headerlink" title="nginx 反向代理"></a>nginx 反向代理</h3></li>
<li>nginx可以反向代理也可以正向代理</li>
<li><a href="https://www.nginx.cn/927.html">外网服务器-》nginx反向代理服务-》内网web服务</a></li>
<li>nginx反向代理使用默认自带的proxy_pass和fastcgi_pass实现<h5 id="反向代理服务器的好处"><a href="#反向代理服务器的好处" class="headerlink" title="反向代理服务器的好处"></a>反向代理服务器的好处</h5></li>
<li>nginx反向代理的重要作用是配合upstream实现负载均衡</li>
<li>增加安全性，客户端不能直接访问后端服务，多一层中间屏障</li>
<li>可以利用缓存，压缩响应提升响应速度<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name www.nginx.cn nginx.cn;</span><br><span class="line"></span><br><span class="line">    location /app &#123;</span><br><span class="line">       fastcgi_pass  unix:/tmp/php-cgi.sock;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name www.nginx.cn nginx.cn;</span><br><span class="line"></span><br><span class="line">    location /app &#123;</span><br><span class="line">       proxy_pass http://127.0.0.1:8080;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">fastcgi_pass是用来反向代理fastcgi协议，proxy_pass可以代理包括fastcgi协议在内的其它协议。</span><br></pre></td></tr></table></figure>
<h3 id="nginx负载均衡配置"><a href="#nginx负载均衡配置" class="headerlink" title="nginx负载均衡配置"></a>nginx负载均衡配置</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#设定http服务器，利用它的反向代理功能提供负载均衡支持</span><br><span class="line">http &#123;</span><br><span class="line"></span><br><span class="line">    #设定mime类型,类型由mime.type文件定义</span><br><span class="line">    include             /etc/nginx/mime.types;</span><br><span class="line">    default_type    application/octet-stream;</span><br><span class="line"></span><br><span class="line">    #设定日志格式</span><br><span class="line">    access_log        /var/log/nginx/access.log;</span><br><span class="line"></span><br><span class="line">    #省略上文有的一些配置节点</span><br><span class="line">    #。。。。。。。。。。</span><br><span class="line"></span><br><span class="line">    #设定负载均衡的服务器列表</span><br><span class="line">    upstream mysvr &#123;</span><br><span class="line">        #weigth参数表示权值，权值越高被分配到的几率越大</span><br><span class="line">        server 192.168.8.1x:3128 weight=5;</span><br><span class="line">        #本机上的Squid开启3128端口,不是必须要squid</span><br><span class="line">        server 192.168.8.2x:80    weight=1;</span><br><span class="line">        server 192.168.8.3x:80    weight=6;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    upstream mysvr2 &#123;</span><br><span class="line">        #weigth参数表示权值，权值越高被分配到的几率越大</span><br><span class="line">        server 192.168.8.x:80    weight=1;</span><br><span class="line">        server 192.168.8.x:80    weight=6;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #第一个虚拟服务器</span><br><span class="line">    server &#123;</span><br><span class="line">        #侦听192.168.8.x的80端口</span><br><span class="line">        listen             80;</span><br><span class="line">        server_name    192.168.8.x;</span><br><span class="line"></span><br><span class="line">        #对aspx后缀的进行负载均衡请求</span><br><span class="line">        location ~ .*.aspx$ &#123;</span><br><span class="line">            #定义服务器的默认网站根目录位置</span><br><span class="line">            root     /root; </span><br><span class="line">            #定义首页索引文件的名称</span><br><span class="line">            index index.php index.html index.htm;</span><br><span class="line">            </span><br><span class="line">            #请求转向mysvr 定义的服务器列表</span><br><span class="line">            proxy_pass    http://mysvr ;</span><br><span class="line"></span><br><span class="line">            #以下是一些反向代理的配置可删除.</span><br><span class="line"></span><br><span class="line">            proxy_redirect off;</span><br><span class="line"></span><br><span class="line">            #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span><br><span class="line">            proxy_set_header Host $host;</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line"></span><br><span class="line">            #允许客户端请求的最大单文件字节数</span><br><span class="line">            client_max_body_size 10m; </span><br><span class="line"></span><br><span class="line">            #缓冲区代理缓冲用户端请求的最大字节数，</span><br><span class="line">            client_body_buffer_size 128k;</span><br><span class="line"></span><br><span class="line">            #nginx跟后端服务器连接超时时间(代理连接超时)</span><br><span class="line">            proxy_connect_timeout 90;</span><br><span class="line"></span><br><span class="line">            #连接成功后，后端服务器响应时间(代理接收超时)</span><br><span class="line">            proxy_read_timeout 90;</span><br><span class="line"></span><br><span class="line">            #设置代理服务器（nginx）保存用户头信息的缓冲区大小</span><br><span class="line">            proxy_buffer_size 4k;</span><br><span class="line"></span><br><span class="line">            #proxy_buffers缓冲区，网页平均在32k以下的话，这样设置</span><br><span class="line">            proxy_buffers 4 32k;</span><br><span class="line"></span><br><span class="line">            #高负荷下缓冲大小（proxy_buffers*2）</span><br><span class="line">            proxy_busy_buffers_size 64k; </span><br><span class="line"></span><br><span class="line">            #设定缓存文件夹大小，大于这个值，将从upstream服务器传</span><br><span class="line">            proxy_temp_file_write_size 64k;    </span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="使用nginx设置缓存"><a href="#使用nginx设置缓存" class="headerlink" title="使用nginx设置缓存"></a>使用nginx设置缓存</h3></li>
<li>随着网站流量的提升，如果只是单台服务器即处理静态文件，又处理动态脚本，效率比较低。因此可以分两层架构组织网站，前端web+后端web服务器</li>
<li>前端请求设置超时时间，缓存页面过期之后再向服务器发起请求请求新的资源</li>
<li>nginx的所有模块都是在编译的时候添加，不能在运行的时候动态添加</li>
<li>nginx的web缓存功能的主要是由proxy_cache、fastcgi_cache指令集和相关指令集完成<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#运行用户</span><br><span class="line">user nobody;</span><br><span class="line">#启动进程,通常设置成和cpu的数量相等</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">#全局错误日志及PID文件</span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line"></span><br><span class="line">#pid        logs/nginx.pid;</span><br><span class="line"></span><br><span class="line">#工作模式及连接数上限</span><br><span class="line">events &#123;</span><br><span class="line">    #epoll是多路复用IO(I/O Multiplexing)中的一种方式,</span><br><span class="line">    #仅用于linux2.6以上内核,可以大大提高nginx的性能</span><br><span class="line">    use   epoll; </span><br><span class="line"></span><br><span class="line">    #单个后台worker process进程的最大并发链接数    </span><br><span class="line">    worker_connections  1024;</span><br><span class="line"></span><br><span class="line">    # 并发总数是 worker_processes 和 worker_connections 的乘积</span><br><span class="line">    # 即 max_clients = worker_processes * worker_connections</span><br><span class="line">    # 在设置了反向代理的情况下，max_clients = worker_processes * worker_connections / 4  为什么</span><br><span class="line">    # 为什么上面反向代理要除以4，应该说是一个经验值</span><br><span class="line">    # 根据以上条件，正常情况下的Nginx Server可以应付的最大连接数为：4 * 8000 = 32000</span><br><span class="line">    # worker_connections 值的设置跟物理内存大小有关</span><br><span class="line">    # 因为并发受IO约束，max_clients的值须小于系统可以打开的最大文件数</span><br><span class="line">    # 而系统可以打开的最大文件数和内存大小成正比，一般1GB内存的机器上可以打开的文件数大约是10万左右</span><br><span class="line">    # 我们来看看360M内存的VPS可以打开的文件句柄数是多少：</span><br><span class="line">    # $ cat /proc/sys/fs/file-max</span><br><span class="line">    # 输出 34336</span><br><span class="line">    # 32000 &lt; 34336，即并发连接总数小于系统可以打开的文件句柄总数，这样就在操作系统可以承受的范围之内</span><br><span class="line">    # 所以，worker_connections 的值需根据 worker_processes 进程数目和系统可以打开的最大文件总数进行适当地进行设置</span><br><span class="line">    # 使得并发总数小于操作系统可以打开的最大文件数目</span><br><span class="line">    # 其实质也就是根据主机的物理CPU和内存进行配置</span><br><span class="line">    # 当然，理论上的并发总数可能会和实际有所偏差，因为主机还有其他的工作进程需要消耗系统资源。</span><br><span class="line">    # ulimit -SHn 65535</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    #设定mime类型,类型由mime.type文件定义</span><br><span class="line">    include    mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    #设定日志格式</span><br><span class="line">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    #sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，</span><br><span class="line">    #对于普通应用，必须设为 on,</span><br><span class="line">    #如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，</span><br><span class="line">    #以平衡磁盘与网络I/O处理速度，降低系统的uptime.</span><br><span class="line">    sendfile     on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #连接超时时间</span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    tcp_nodelay     on;</span><br><span class="line"></span><br><span class="line">    #开启gzip压缩</span><br><span class="line">    gzip  on;</span><br><span class="line">    gzip_disable &quot;MSIE [1-6].&quot;;</span><br><span class="line"></span><br><span class="line">    #设定请求缓冲</span><br><span class="line">    client_header_buffer_size    128k;</span><br><span class="line">    large_client_header_buffers  4 128k;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    #设定虚拟主机配置</span><br><span class="line">    server &#123;</span><br><span class="line">        #侦听80端口</span><br><span class="line">        listen    80;</span><br><span class="line">        #定义使用 www.nginx.cn访问</span><br><span class="line">        server_name  www.nginx.cn;</span><br><span class="line"></span><br><span class="line">        #定义服务器的默认网站根目录位置</span><br><span class="line">        root html;</span><br><span class="line"></span><br><span class="line">        #设定本虚拟主机的访问日志</span><br><span class="line">        access_log  logs/nginx.access.log  main;</span><br><span class="line"></span><br><span class="line">        #默认请求</span><br><span class="line">        location / &#123;</span><br><span class="line">            </span><br><span class="line">            #定义首页索引文件的名称</span><br><span class="line">            index index.php index.html index.htm;   </span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # 定义错误提示页面</span><br><span class="line">        error_page   500 502 503 504 /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #静态文件，nginx自己处理</span><br><span class="line">        location ~ ^/(images|javascript|js|css|flash|media|static)/ &#123;</span><br><span class="line">            </span><br><span class="line">            #过期30天，静态文件不怎么更新，过期可以设大一点，</span><br><span class="line">            #如果频繁更新，则可以设置得小一点。</span><br><span class="line">            expires 30d;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #PHP 脚本请求全部转发到 FastCGI处理. 使用FastCGI默认配置.</span><br><span class="line">        location ~ .php$ &#123;</span><br><span class="line">            fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">            fastcgi_index index.php;</span><br><span class="line">            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</span><br><span class="line">            include fastcgi_params;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #禁止访问 .htxxx 文件</span><br><span class="line">            location ~ /.ht &#123;</span><br><span class="line">            deny all;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>python学习第一课：数据/循环/判断</title>
    <url>/2021/07/21/python%E5%AD%A6%E4%B9%A0/%E7%AC%AC%E4%B8%80%E8%8A%82%E8%AF%BE/</url>
    <content><![CDATA[<h2 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h2><h3 id="“”双引号"><a href="#“”双引号" class="headerlink" title="“”双引号"></a>“”双引号</h3><h3 id="‘’单引号"><a href="#‘’单引号" class="headerlink" title="‘’单引号"></a>‘’单引号</h3><h3 id="“”“-“”“-三个引号"><a href="#“”“-“”“-三个引号" class="headerlink" title="“”“ “”“ 三个引号"></a>“”“ “”“ 三个引号</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name=&quot;文件管理系统&quot;</span><br><span class="line">name=&#x27;文件管理系统&#x27;</span><br><span class="line">name=&quot;&quot;&quot;</span><br><span class="line">    文件管理</span><br><span class="line">    系统</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">name1, name2, name3 = &quot;文件&quot;, &quot;系统&quot;, &quot;管理&quot; 同时命名多个变量</span><br><span class="line">name1 = name2 = name3 = &quot;文件系统&quot; </span><br></pre></td></tr></table></figure>
<h2 id="运算符（-）"><a href="#运算符（-）" class="headerlink" title="运算符（+ - * / % ** //）"></a>运算符（+ - * / % ** //）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3**3 = 27</span><br><span class="line">10//3 = 3</span><br><span class="line">10%3 = 1</span><br></pre></td></tr></table></figure>
<ul>
<li>只能是同类型的变量进行运算，不同类型的变量运算会直接报错<h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2></li>
<li>if elif else<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">today = 4</span><br><span class="line">if today == 1:</span><br><span class="line">    print(&quot;周一&quot;)</span><br><span class="line">elif today == 2:</span><br><span class="line">    print(&quot;周二&quot;)</span><br><span class="line">elif today == 3:</span><br><span class="line">    print(&quot;周三&quot;)</span><br><span class="line">else:</span><br><span class="line">    print(&quot;周一周二周三之外的一天&quot;)</span><br></pre></td></tr></table></figure></li>
<li><blockquote>
<p>&lt; &gt;= &lt;= != ==</p>
</blockquote>
</li>
<li>and or not<h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for i in range(5)   //range(5)输出0，1，2，3，4</span><br><span class="line">    print(i)</span><br><span class="line">range(2,5)     // 输出 2，3，4</span><br><span class="line">range(3, 10, 2)     // 输出3，5，7，9</span><br><span class="line">while循环类似于js中while</span><br><span class="line">num = 0</span><br><span class="line">while num&lt;10</span><br><span class="line">    num++</span><br><span class="line">    print(num)</span><br></pre></td></tr></table></figure></li>
<li>break 跳出当前循环并终止循环</li>
<li>continue 只是跳出当前循环执行下一次村还<h2 id="数据种类"><a href="#数据种类" class="headerlink" title="数据种类"></a>数据种类</h2><h3 id="列表（相当于一列抽屉）"><a href="#列表（相当于一列抽屉）" class="headerlink" title="列表（相当于一列抽屉）"></a>列表（相当于一列抽屉）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">files=[1,2,3,4,5,6]</span><br><span class="line">print(files[0],files[1],files[-1],files[-2])</span><br><span class="line">files[0:3] files[:3]</span><br><span class="line">files[-3:]</span><br><span class="line">files[0]=0  // 修改列表数据</span><br><span class="line">l = [1, &quot;file&quot;, [&quot;2&quot;, 3.2]]     // 可以是多元列表</span><br><span class="line">print(l)</span><br><span class="line">l[2][0] = &quot;new string&quot;</span><br><span class="line">print(l)</span><br></pre></td></tr></table></figure></li>
<li>相同的列表用==进行判断是False<h4 id="常用方法："><a href="#常用方法：" class="headerlink" title="常用方法："></a>常用方法：</h4></li>
<li>append()向后面添加一个元素，只能传一个参数</li>
<li>pop()从后面删除一个元素</li>
<li>extend()从后面扩充多个元素</li>
<li>insert(index,ele) 从下标位置添加一个元素</li>
<li>del ele   删除某个元素</li>
<li>remove()  删除某个元素，类似于del<h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3></li>
<li>类似于js中对象（相当于给每一个抽屉边角上贴了标签）<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">files=&#123;a:1,b:[1,&#x27;2&#x27;],c:&#123;a:0&#125;&#125;</span><br><span class="line">files[a]=2  // 可以修改字典</span><br></pre></td></tr></table></figure></li>
<li>keys,values,items可以获取到字典的</li>
<li>没有重复的key，同样的key取到的是同样的值</li>
<li>字典中元素也可以是任意元素，但是也不会重复的元素<h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4></li>
<li>pop(key)删除元素</li>
<li>del()删除元素<h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3></li>
<li>类似于把列表的[]换成(),里边的每一个元素都不可改变<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">files = (&quot;file1&quot;, 1,&#123;&quot;a&quot;:1&#125;, (&quot;file3&quot;))</span><br><span class="line">print(files[1])</span><br></pre></td></tr></table></figure></li>
<li>元组里面的元素可以是数字，字符串，列表，字典，元组</li>
<li>用法类似于js中const<h3 id="set-集合"><a href="#set-集合" class="headerlink" title="set 集合"></a>set 集合</h3></li>
<li>集合中没有重复的元素</li>
<li>集合中元素没有顺序，所以不能想元组和列表那样根据下标访问<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">files=set([1,2,3,4])</span><br><span class="line">files[0]    // 报错</span><br><span class="line">files.add(0)    //会向前面添加一个元素</span><br><span class="line">files.reomve(1) // 删除括号中元素</span><br><span class="line">remove不存在的值也会报错</span><br><span class="line">add 和remove只能传一个值</span><br></pre></td></tr></table></figure>
<h4 id="for循环可以遍历列表，字典，元组，集合"><a href="#for循环可以遍历列表，字典，元组，集合" class="headerlink" title="for循环可以遍历列表，字典，元组，集合"></a>for循环可以遍历列表，字典，元组，集合</h4></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>服务端</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python学习第二课：文件管理</title>
    <url>/2021/07/22/python%E5%AD%A6%E4%B9%A0/%E7%AC%AC%E4%B8%89%E8%AF%BE/</url>
    <content><![CDATA[<h2 id="读写文件"><a href="#读写文件" class="headerlink" title="读写文件"></a>读写文件</h2><h3 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f = open(&#x27;new_file.py&#x27;,&#x27;w&#x27;) //创建并打开文件</span><br><span class="line">f.write(&#x27;any info……&#x27;)   // 给文件写内容</span><br><span class="line">f.close()   // 关闭文件</span><br><span class="line">// 用with的防护不必写close</span><br><span class="line">with open(&#x27;new_file.py&#x27;,&#x27;w&#x27;) as f:</span><br><span class="line">    f.writelines([&#x27;some text for files2...\n&#x27;,&#x27;2nd line&#x27;])</span><br></pre></td></tr></table></figure>
<h3 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f = open(&#x27;new_file.py&#x27;,&#x27;r&#x27;)</span><br><span class="line">print(f.read())</span><br><span class="line">f.close()</span><br><span class="line">with open(&#x27;new_file.py&#x27;,&#x27;r&#x27;) as f:</span><br><span class="line">    f.readlines()</span><br></pre></td></tr></table></figure>
<ul>
<li>readlines是读取所有内容，然后整体返回</li>
<li>readline琢行进行读并返回<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">with open(&#x27;new_files.txt&#x27;,&#x27;r&#x27;) as f:</span><br><span class="line">    while(True):</span><br><span class="line">        line = f.readline()</span><br><span class="line">        if not (line):</span><br><span class="line">            break</span><br></pre></td></tr></table></figure>
<h3 id="文件编码"><a href="#文件编码" class="headerlink" title="文件编码"></a>文件编码</h3></li>
<li>读写的时候编码格式应该一样，就不会出现乱码<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f  = open(&#x27;new_file.txt&#x27;,&#x27;w&#x27;)</span><br><span class="line">f.writelines(&#x27;这是中文，this is chinese&#x27;.encode(&#x27;gbk&#x27;))</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">with open(&#x27;new_file.txt&#x27;,&#x27;r&#x27;,encoding = &#x27;gbk&#x27;) as f:</span><br><span class="line">    print(f.readLines())</span><br></pre></td></tr></table></figure>
<h3 id="字符含义"><a href="#字符含义" class="headerlink" title="字符含义"></a>字符含义</h3></li>
<li>w 写文本</li>
<li>r 读文本</li>
<li>a 在文本后面天际</li>
<li>wb  写二进制</li>
<li>rb  读二进制</li>
<li>ab  添加二进制</li>
<li>w+  既可以读又可以写（创建文件）</li>
<li>r+  读写，文件不存在报错</li>
<li>a+  读写，在后面添加</li>
<li>x   创建<h2 id="文件目录管理"><a href="#文件目录管理" class="headerlink" title="文件目录管理"></a>文件目录管理</h2></li>
<li>主要用到os模块</li>
<li>os.getcwd()</li>
<li>os.listdir()</li>
<li>os.path.exists()</li>
<li>os.makedirs()</li>
<li>os.removedirs()   //这个只有文件内容为空的时候可以用，否则就会报错</li>
<li>shutil</li>
<li>shutil rmtree()   // 删除文件</li>
<li>os.path.isfile()</li>
<li>os.path.isdir()</li>
<li>os.exists()<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import os </span><br><span class="line">def copy(path):</span><br><span class="line">    filename = os.path.basename(path)   // 文件名</span><br><span class="line">    dirname = os.path.dirname(path)     // 文件夹名</span><br><span class="line">    // dir_name,filename = os.path.split(path)  以上两行代码可以用这一行代码代替</span><br><span class="line">    new_fielname = &quot;new&quot;+filename</span><br><span class="line">    return os.path.join(dirname,new_filename)</span><br><span class="line">print(copy(&quot;users/mofan/a.txt&quot;))</span><br></pre></td></tr></table></figure>
<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2></li>
<li>re.search 从每一行的开始进行匹配</li>
<li>re.match  从字符串的最开始进行匹配</li>
<li>re.findall</li>
<li>re.finditer</li>
<li>re.sub    返回替代后的字符串</li>
<li>re.subn   返回替代次数</li>
<li>正则中加入一个()就会返回括号里面匹配的内容<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">string = &quot;I have 2021-02-01.jpg, 2021-02-02.jpg, 2021-02-03.jpg&quot;</span><br><span class="line">print(&quot;without ():&quot;, re.findall(r&quot;[\w-]+?\.jpg&quot;, string))</span><br><span class="line">print(&quot;with ():&quot;, re.findall(r&quot;([\w-]+?)\.jpg&quot;, string))</span><br></pre></td></tr></table></figure>
<h2 id="pickle和json"><a href="#pickle和json" class="headerlink" title="pickle和json"></a>pickle和json</h2><table>
<thead>
<tr>
<th align="center">对比</th>
<th align="center">pickle</th>
<th align="center">json</th>
</tr>
</thead>
<tbody><tr>
<td align="center">存储格式</td>
<td align="center">python特定的bytes格式</td>
<td align="center">通用json text格式，可用于常用的网络通信</td>
</tr>
<tr>
<td align="center">数据种类</td>
<td align="center">类，功能，字典，列表，元组</td>
<td align="center">基本和pickle一样，但不能存类，功能</td>
</tr>
<tr>
<td align="center">保存后可读性</td>
<td align="center">不能直接阅读</td>
<td align="center">能直接阅读</td>
</tr>
<tr>
<td align="center">跨语言性</td>
<td align="center">只能用在python</td>
<td align="center">可以跨多种语言</td>
</tr>
<tr>
<td align="center">处理时间</td>
<td align="center">长（需要编码数据）</td>
<td align="center">短（不需用编码数据）</td>
</tr>
<tr>
<td align="center">安全性</td>
<td align="center">不安全</td>
<td align="center">相对安全</td>
</tr>
</tbody></table>
</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>服务端</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python学习第二课：函数/类/模块</title>
    <url>/2021/07/21/python%E5%AD%A6%E4%B9%A0/%E7%AC%AC%E4%BA%8C%E8%8A%82%E8%AF%BE/</url>
    <content><![CDATA[<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul>
<li>局部变量和全局变量<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">filename = &quot;f1.txt&quot;</span><br><span class="line">def modify_name():</span><br><span class="line">    filename = &quot;f2.txt&quot;</span><br><span class="line">    print(&quot;local filename:&quot;, filename)  // 修改不了全局变量，只有在函数内部才是f2.txt</span><br><span class="line">modify_name()</span><br><span class="line">print(&quot;global filename:&quot;, filename)</span><br></pre></td></tr></table></figure></li>
<li>修改全局变量需要提前声明一下<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">filename = &quot;f1.txt&quot;</span><br><span class="line">def modify_name():</span><br><span class="line">    global filename  # 提出申请</span><br><span class="line">    filename = &quot;f2.txt&quot;</span><br><span class="line">    print(&quot;local filename:&quot;, filename)</span><br><span class="line">modify_name()</span><br><span class="line">print(&quot;global filename:&quot;, filename)</span><br></pre></td></tr></table></figure></li>
<li>可以类似于js中函数一样设置默认值<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def function(arg=1):</span><br><span class="line">    print(arg)</span><br></pre></td></tr></table></figure>
<h2 id="class类"><a href="#class类" class="headerlink" title="class类"></a>class类</h2></li>
<li>通常我们约定类的名字要首字母大写<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class File:</span><br><span class="line">    def __init__(self):     // __init__在每一个类示例化的时候自动触发，在这里设定一些类的属性</span><br><span class="line">        self.name=&#x27;f1&#x27;</span><br><span class="line">        self.create_time=&#x27;today&#x27;</span><br><span class="line">my_file = File()</span><br><span class="line">print(my_file.name)</span><br><span class="line">print(my_file.create_time)</span><br></pre></td></tr></table></figure></li>
<li>类的继承需要用到super关键字<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class File():</span><br><span class="line">    def __init__(self,name):</span><br><span class="line">        self.name=name</span><br><span class="line">class Video(File):</span><br><span class="line">    def __init__(self,name,size):</span><br><span class="line">        super().__init__(self,name)</span><br><span class="line">        self.size = self.size</span><br><span class="line">class Media(File):</span><br><span class="line">    def __init__(self,name,count):</span><br><span class="line">        super().__init__(name)</span><br></pre></td></tr></table></figure>
<h2 id="module"><a href="#module" class="headerlink" title="module"></a>module</h2></li>
<li>模块引入import<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import file</span><br><span class="line">import file as fl</span><br><span class="line">from file import file_name,file_create_time</span><br></pre></td></tr></table></figure></li>
<li>module的设计和类的设计一摸一样</li>
<li>对于多层级的模块可以通过以下两种方式引入<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第一种在根目录文件夹下新建__init__.py，然后把该文件夹下的模块import到这里(从files文件夹引用其内部的文件)</span><br><span class="line">然后再到别的模块中直接引用</span><br><span class="line">第二种直接通过目录嵌套引用</span><br><span class="line">import files.text</span><br><span class="line">或者</span><br><span class="line">from files import text</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>服务端</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
</search>
